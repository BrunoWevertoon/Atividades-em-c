// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>


// variaveis globais x 0 " "
char jogo[3][3];
int l, c;
// procedimento para inicializar todas as posições da matriz

void inicializarMatriz(){
    
    for(l = 0; l < 3; l++){
        for(c = 0; c < 3; c ++){
            
            jogo[l][c] = ' ';
        }
    }
    
    
}

// procedimento para imprimir o jogo na tela

void imprimir(){
    printf("\n\n\t 0   1   2\n\n");
    for(l = 0; l < 3; l++){
        for(c = 0; c < 3; c ++){
            if(c == 0)
                printf("\t");
            printf(" %c ", jogo[l][c]);
            if(c < 2){
                printf("|");
            }
        }
        printf("   %d", l); // Corrigido: imprime o índice da linha após a última coluna
        printf("\n");
        if(l < 2)
            printf("\t-----------\n");
    }
}


// função para verificar vitoria por linha 1- ganhou, 0 - nao ganhou

int ganhouPorLinha(int l, char c){
    
    if(jogo[l][0] == c && jogo[l][1] == c && jogo[l][2] == c){
        return 1;
    }
    else{
        return 0;
    }
    
}

// funcao para verificar vitoria por linhas 1- ganhou, 0 - nao ganhou

int ganhouPorLinhas(char c){
    int ganhou = 0;
    for(l = 0; l < 3; l++){
        
        ganhou += ganhouPorLinha(l, c);
    }
    
    return ganhou;
}


//funcao para verificar vitoria por coluna
int ganhouPorColuna(int c, char j){
    
    if(jogo[0][c] == j && jogo[1][c] == j && jogo[2][c] == j){
        return 1;
    }
    else{
        return 0;
    }
    
    
    
}
//Funcao para verificar se ganhou por Colunas
int ganhouPorColunas(char j){
    int ganhou = 0;
    for(c = 0; c < 3; c++){
        
        ganhou += ganhouPorColuna(c,j);
    }
    return ganhou;
}

//funcao para verificar vitoria na diagonal principal

// Para diagonal principal
int ganhouPorDiagonalPri(char c){
    if(jogo[0][0] == c && jogo[1][1] == c && jogo[2][2] == c){
        return 1;
    }
    else{
        return 0;
    }
}

// Para diagonal secundária
int ganhouPorDiagonalSec(char c){
    if(jogo[0][2] == c && jogo[1][1] == c && jogo[2][0] == c){
        return 1;
    }
    else{
        return 0;
    }
}



//funcao que diz se uma coordenada é valida ou nao

int ehValida(int l, int c){
    
    if(l >= 0 && l <3 && c >= 0 && c < 3 && jogo[l][c] == ' ') {
        return 1;
    }
    else{
        return 0;
    }
    
    
}

//procedimento para ler as coordenadas do jogador

void lerCoordenadas(char j){
    int linha, coluna;
    
    printf("Digite linha e coluna: ");
    scanf("%d%d", &linha, &coluna);
    
    while(ehValida(linha, coluna) == 0){
        printf("Coordenadas invalidas! Digite outra linha e coluna: ");
        scanf("%d%d", &linha, &coluna);
    }
    
    jogo[linha][coluna] = j;
    
}

// funcao que retorna a quantidade de posicoes vazia

int quantVazias(){
    int quantidade = 0;
    
    for(l = 0; l < 3; l++){
        for(c = 0; c < 3; c ++){
            if(jogo[l][c] == ' '){
                quantidade++;
            }
        }
    }
    return quantidade;
    
}

//procedimento jogar com o loop principal do jogo

void jogar(){
    int jogador = 1;
    char jogador1 = 'X', jogador2 = '0';
    int vitoriaX = 0, vitoria0 = 0;
    do{
        imprimir();
        if(jogador == 1){
            lerCoordenadas('X');
            jogador++;
            vitoriaX = ganhouPorLinhas(jogador1) || ganhouPorColunas(jogador1) || ganhouPorDiagonalPri(jogador1) || ganhouPorDiagonalSec(jogador1);
        }
        else{
            lerCoordenadas('0');
            jogador = 1;
            vitoria0 = ganhouPorLinhas(jogador2) || ganhouPorColunas(jogador2) || ganhouPorDiagonalPri(jogador2) || ganhouPorDiagonalSec(jogador2);
        }
    } while(vitoriaX == 0 && vitoria0 == 0 && quantVazias() > 0);
    imprimir();
    if(vitoria0 == 1){
        printf("\nParabens Jogador 2. Voce Venceu!!!\n");
    }
    else if(vitoriaX == 1){
        printf("\nParabens Jogador 1. Voce Venceu!!!\n");
    }
    else{
        printf("\nQue pena. Empate!!!\n");
    }
}

int main() {
    int opcao;
    do {
        inicializarMatriz(); // Reinicialize a matriz para cada nova partida
        jogar();
        printf("\nDigite 1 para jogar novamente: ");
        scanf("%d", &opcao);
    } while(opcao == 1);

    return 0;
}
